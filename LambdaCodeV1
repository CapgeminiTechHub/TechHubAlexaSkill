# -*- coding: utf-8 -*-
""" Trivia quiz.. """
from __future__ import print_function
import math
import string

locale = "en-GB"

def lambda_handler(event, context):
    """ App entry point  """
   
    print('App entry point')
    if event['request']['type'] == "LaunchRequest":
        return on_launch(event['request'], event['session'])
    elif event['request']['type'] == "IntentRequest":
        return on_intent(event['request'], event['session'])
    elif event['request']['type'] == "SessionEndedRequest":
        return on_session_ended()

# --------------- response handlers  -----------------

# Response handler for an IntentRequest
def on_intent(request, session):
    # Get the intent and the name of the intent
    intent = request['intent']
    intent_name = request['intent']['name']
    print("on_intent " +intent_name)
    print(request)

    # take action depending on the specified intent
    if intent_name == "AMAZON.CancelIntent":
        return cancel_response(locale)
    elif intent_name == "AMAZON.StopIntent":
        return cancel_response(locale)
    elif intent_name == "AMAZON.HelpIntent":
        return dohelp(request, False, locale)
    elif intent_name == "EventIntent":
        return get_events(False, request, session, intent, locale)
    return dohelp(request, False, locale)

def get_events(usergaveup, request, session, intent, locale):

    # Build the attribute section of the response JSON message
    attributes = {  'speechOutput': "",                                                
                    'repromptText': ""
                 }
    # Return the JSON response consisting of the atrributes, the speech response prompt card, the speech message and the reprompt
    return response(attributes, response_plain_text("There are lots of events going on in the Tech Hub", False))


# Build the cancel response
def cancel_response(locale):

    return response("", response_plain_text("Thanks for asking about the Tech Hub", True))

# Build a help response
def dohelp(request, newgame, locale):

        return response("", response_plain_text("Ask the Tech Hub core team if you need help", False))



# handler for the start request
def on_launch(request, session):

    locale = "en_GB"
    attributes = {  'speechOutput': "Welcome to the Tech Hub",                          
                    'locale': locale
                 }

    return response(attributes, response_plain_text("Welcome to the Tech Hub", True))

def on_session_ended():
    """ called on session end  """

# --------------- speech response handlers -----------------
# build the json responses

def response_plain_text(output, endsession):
    """ create a simple json plain text response  """
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'shouldEndSession': endsession
    }

def response(attributes, speech_response):
    """ create a simple json response """
    return {
        'version': '1.0',
        'sessionAttributes': attributes,
        'response': speech_response
    }
